==============================
üîπ 1. PRUEBAS FUNCIONALES B√ÅSICAS
==============================

‚úÖ Todos los fil√≥sofos comen sin morir:
./philo 5 800 200 200

‚úÖ Todos comen N veces y programa termina:
./philo 5 800 200 200 3

‚úÖ Solo 1 fil√≥sofo: debe coger un tenedor y morir despu√©s de time_to_die:
./philo 1 800 200 200

‚úÖ Argumentos con espacios y comillas:
./philo "5 800 200 200"
./philo "2 300" "100 100" 3

==============================
üîπ 2. CASOS L√çMITE Y COMPORTAMIENTOS SUTILES
==============================

‚úÖ El fil√≥sofo no muere mientras est√° empezando a comer:
./philo 2 310 200 100

‚úÖ Control de tiempos ajustados (peligro de muerte):
./philo 2 201 200 200

‚úÖ El tiempo de comer m√°s largo que el de morir:
./philo 2 300 400 100 (deben morir al intentar comer)

‚úÖ Cada fil√≥sofo come exactamente N veces:
./philo 5 800 200 200 7

==============================
üîπ 3. VALIDACI√ìN DE ARGUMENTOS
==============================

‚ùå Menos de 4 o m√°s de 5 argumentos:
./philo 5 800 200
./philo 5 800 200 200 3 100

‚ùå Argumentos no num√©ricos:
./philo 5 800 abc 200
./philo hola mundo

‚ùå N√∫meros negativos o cero:
./philo 0 800 200 200
./philo -1 800 200 200
./philo 5 -800 200 200

‚úÖ Comprobaci√≥n de l√≠mites grandes:
./philo 200 800 200 200 3

==============================
üîπ 4. PROTECCI√ìN Y CONDICIONES DE CARRERA
==============================

‚úÖ No hay solapamiento en los mensajes (protegido por mutex de impresi√≥n):
./philo 5 800 200 200

‚úÖ El fil√≥sofo no muere mientras actualiza `last_meal_time`:
Usar tiempos l√≠mite:
./philo 3 210 200 100

‚úÖ No hay deadlock (todos pueden comer eventualmente):
./philo 5 800 200 200

‚úÖ Mutexes destruidos correctamente al final:
valgrind --leak-check=full ./philo 5 800 200 200


